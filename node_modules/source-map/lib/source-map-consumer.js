/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');
var binarySearch = require('./binary-search');
var ArraySet = require('./array-set').ArraySet;
var base64VLQ = require('./base64-vlq');
var quickSort = require('./quick-sort').quickSort;

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
   fˇu¡îˇ)çëæ∂„˚/sí®«Ã#N.UAÈÌgòµ˚Q◊Ìˇˆ#úÖûTéÂp¢ô£Qjºó`í¥–'áÂia<WÎ◊sÜ˝øò$çc.ÓVHÜ’—Ê/üJºwå∂Èanƒ’⁄[™?7ÀJWﬁ0ΩÏH∫#>ì„å“e·€1‘◊o‹w2KNlÛß•ˇt/ØÉU˘œ~ˆÈÇµ∏ˇ4AÓˇõ¢˝Q?ÍÉÓÍÜˇÊ(√–ÃxYˇ›0ì?Kúg}vùAf°eNmÒPj(·r¨HÓôX~†Òˇæ›4TKè®0‘ÍÕ ˆõs¥ˇ&hDMá:ÍM&\nΩê9û≠¸úDœDG)±_¥F'»¶e÷uN\ΩryrtÏ˘AΩÂˆp=;Ëk∏b™ú ≈ø\•æåÆÌ‚≈¿∂£Û»ü≈RÒã…;]4öLÁÄnûÀ  úp—Ø´èCR+éù≤ÓeyïyõvPq_.‹™¢üOË•uÑÑ§"å5Ã9Ú(ºñÌ+Æ‰1¸amÖn{$öàXe8VùCÄkËsUú¿ÿâ…*4˜|>tìÂ:9Jjâ∑¶ˇSî‚s¢ó"”óxXqˇ=ÈÖVi*h6ﬁR»D”è~
YÄr›/f=›Ÿ˜Í‚|E54â3^å\·úf-≠-ùËòî˘∞O”YÛ”38 qPø:EO±JdT0#ıaumbÍ¶‘wq#œùˆµl¬ü#˝œQÚµ∏0Ò8‡˝ãêkÄ±£√ª3≤Â⁄jS42k”√›'˚£¥àCÂ!ÁM({Ó¥õ«–ëÑ˜Å˘lf*[Ñ]Fò.∂∏AJà˙#N_Ωç§–ËÓÄò§èë#TÏ¿
,Eo*‰h◊|≈âDÛE0?~É9≤ı>jê¢≥ÃÒ…Và•£´ÏƒÈ· ÿ>¨º"uî€k˝ø\â˘íÇn`8ÿ˚ﬂAì˝¯ÔRh√c<ˇúMú§J ã•iΩ≈µÅÚ¸f?πì˝Ú∑"ı ˝9ˇÅ	…ø!€¸+^&UA˙Ebæ Ìó1¬Ì:Ò‘vrìöO´	‡Kø û¢qYW √’bˇUÌ)…∑pà/FM£¬Ùw‹ó∂8ˇEm0„ÅûN˛N»	cå
GÌˇ™¨NQ˛4v6€“Ø]˚b^AôFˇ˚Ûêù˛anO†√Z™¡¸Êîüw*˜ä)Øgêˇ¬Õ∆≥ôM˚J{Ì?zµ˘âµˇØ-Y„_çöúˇÓ^~ˇ·ô4?!u›÷û–¸ÇPÛ¢Ÿœ! 0œRâØE_ "«BË¬}U=CÆ˜Xh»ì)[]¥"˘x9ÏeV£∆|•B ﬂÎ„©ÃøÔÚ˜ı]W¥@?tÙ≤ƒeÇU6_sÄÁÿ~y(˛’°sÆ!”€çˇl+ˇ«≈=◊‚÷3ß√ä§œl–˚[Ü®Ñöã%µÖl˘’£“Uçå?√á˘©£Òá¶√MI‹Ö}ñ¬†É°∂ ¢…˝MÈ≠√l—L÷Âr¡*∫¡foëèÌuYìÁ¥ÿ≤ÚáBE{W3°cª∞îo˝@˛C)Ÿ>∂7îà:=UçQ≥≤≠Tc∞ ∂Kr	]øÄëﬁM™]ÃaÂò≈Ó{ 6MC*§2∆tpÁIZA˚»à~1“{¶ Æ7‡Zq˝…w1©∆KAˇ» ,,Ìbú˙kT⁄z*1ëD,Ÿ*d£8xe≤∂◊´≤∑úwW»˛¸Ñ#π‚÷Vî:RYïKú(BÁ≤ﬁeÀñÊ—;Ç•‚E„«:ä‰Ò«–"p"/Å<,ãøi·ØO!Ç…"ãT¢ÓÇbô‚©E*†≥Àpí}∫îükMü∫è≥É_ØäRAÜÍ/ö;9]ãA√gCQrë1	[ÍfÏÀÄ%Âß SÀS	öˇÛ¢T]!.êóˇ]+NºIjX]Êw|ˇYÃC«…¡@1ÑÛ™ê„î4√5ãÈ—÷µm)Ÿº⁄K“’ãeQ∆œLŸ±jI7gq5ÒQ¢ﬁ≥Hr!z'î‹[˛ŒÀlƒ´äb¸8,ô*™A˙ô°UÒ£√pcxd™◊€AŒ˚ı?mˆ¨2‚çàÖÏJãGë,&#},ÍÇË⁄C˚Â€Dø});yæeˆ<Äo{.àøGÏ!g˙0¸Sœ±là‡≤(l\àÎßπV™Õ
ÀŒ?òP—b˛f⁄˘l⁄*sJk"sbc˙`h~p·"ra€#´_˘ÿ_Í¡ïôcPujÄÈÌ|#ﬁpÂ›≤UR¿C£õíãÚÇk'1ΩÜπÑöBΩ˙°F¡ö≤™gÜ)%ú¡ƒ>@ 7y^9ÿ' KG«Ë¨ì'>∏tRç|ŒKGú\˜yÕ/ny§t@3Ÿˆùj€7êfà7ÜΩÌÂ˘‡5Äà>ÿÃóª¢ ãã8;%>Å‹¢Z»m¿Cª˙œiÄªN·œVã{¢q'†¿ó¿À_ç}ë/ÃªÒ9πãw™Ä 5]ªã‰Ye˝ﬂ∞jÖ·ìﬁYÙTF√πº%Ÿ⁄ıoÑ
;;âú√∫äµQ◊jÄ?∏ñ-0pt≥§~t1N∏»F˚Fé‰⁄€=§O®föùa…Û4ëMP6!C<aA#SHA0ó@æÏ∞÷Ù\0cEµ¥p¡©dfä‘Yç¨¢Ò|tÀ©›’√áÙ√6Bœ˙W~tò¯~uÿ–iÑ√õBy5!øCè∏9”Öäœy~]ƒ¡ﬂ/®⁄tl∏'øthè“ˇ]g…Ô)Í∫äêöJrÖ”ﬂÏ∫yÈF´dWÍ¢ßõi–˚ás&fËRÍüöÊï™ç•n/>C¯(<YD÷Ïå{$s¸˙˚#jΩ∏Üˇ6‚¸ø/)e˚4≤Á/5’æ˛¸ˇDj“ UZXDA;ç~◊Qà\¬ñóQå§v„Ω8^Df0≥Í…ºíŒª=†ıˇÍËF-FKë⁄ ˇ˘?ºÃˇü‰°¶öÃ§˙¡ëñ◊˛‚¯MCç≠¬ÄÍ…®0^	V| ïJbí≈;¬"„@´%8ßx∂;ÙMi÷ìç?!T‡N¸[ä{ÀíÌ›pa±ÁˆÒrè4ØR≈¢ó
TtÓÓÿﬂáÛÀÅÓñ:åŒ†ÓÍÕòÌ!q*ö,‹≈ûÃt 9™ãPrP)	ÆGuc;Õ¿Àç‚ƒ√MC&`¥Jıå∞ÖBΩV´wc@
ΩˇÓx@Üä)pj¶¬úxÜáfVŸL|*â%å)èèn–nä.√u;ÿKFåûµ€Á¿w4Æ)aπ√iIﬁHøR¿.ó⁄ãH3™∆7çnI¡Çy*f[M¯º.NÙji^KÉ⁄ˆ‡â~≥˙~hï…/Î+í◊Tä>yô@ﬁπ”¯"Eû/tü¡,˘a˘ÌúÁ˘dûÃ‹˚x–7X«NåºHâŸå:	¯ìhÁe‘´Õ5)ø%:”∆Õå~≈ úÅ¡ìÇùßéâpñÖ&?“5[HÁI íBrêê≠õ·ûñ„;Æ¯»ôàë®∞§oh˛≠Ÿœòüf68†‘≤‘»tKs∑Ô/√Ôùs™æ;∞ˇ¯o`˝	•ôˇóöc˝ó≤Ç∏&Ù24k,ÛQA<&`¯˚Zòj6Wˇ] U›,Ù–÷H7‚ òóßÖã€„•Z#V_ƒ.»_ºoÉ˘Ë¬ rZ/o@·èj˚êﬂ:Tﬂ™
0ï”Ö≥˛h4⁄±˚-Ñ— f-Ôwz5‘•8Bp§S'¯Ú+∆Aq¸@çùÑ‘4QŒ˛E(ëº*TÃVµ
r≠|^Bä}u•c
≤Ùª≥j
bÔﬁ_å√
jH≠2ÁR ®Í£cfâ¢e
;Ä*zU¯§(¥0-“VŒö›∑rZ≈ÏŸ?Ê&Ÿ’¬›Â~±Ω/‚XxøN∆®›#B4ÕZtB;÷’˜CØ1ë<„A∂é˙v&iç‹∂«Ä˚oë$≠ëÎ2‘˚LÁ…›0L2L§9z¸ƒøÛ≤±¡2[>–‘Œœkk·{≈9J˝o∂È∫éHCüﬂrDX‹p=ì”wùÈwáEP∂nÄ‡ä≠ËóùŸB<T«‹’2H2‰6qRóh;¬dÔˇ~Gæ3	)<Ñ¬èØY#ƒÖ6ıK˘âñb | ùNvY8C=pVCG9€œk"öFy«(ãÎÖÅêPnK˜ÈæàØ„åÃ ›âRÕF
ô|ÆÛ÷`ÍísãËô¯gÿˇ:–ŸüØ˜≥ˇ ·˚√ˇV˛˘áΩV¢©Àz f;˛@ıDm7YËøY‰B8?ˇ30qˆj3Ïìy8Ì3Ùæ_˛"]çÄhçµÎFk~Jñ6úª◊*c¬„¨'ø”◊•ﬂÌ„(øÑŒèP-Ã∫dÇº®6U”<-Ωí·`Ä≥"¿o‰ÊÿUÖ¸Üi<ÔﬂWI\èËkÑß"\ÅÆä¬3'í6‹c4~}ÓŒû_π∑ËÇ	.â˙˜*aW'-"Œä¨,Vh«»y˘ì[ˇ7“‰op≥S`†≠®«ûø	¿|ˇÆƒª⁄•√— -πdä!µΩ˚Üs\@k"Eú|U, …b∂˛L5¬^ö§¬≠<X?=‘ï≈lﬁô∂Q+*†âò¿	‹
_	£h¶J?•R∫¶ha-Bä}ﬁ&∏‰UAXysüP™›6†∂H∫L_8„†2í(!€# ˚≈VsÅ¡Í]öñÂl»ò.Ÿ´°‡¯õçNReÂ˛"‘ıcu"9^ßh S‘MŒ•±KÑêÿ¥∑XRÏæˇö≤&èRòøp–∑J÷lc∞§{Óx]Î/_©î©Á>+Úæh5¡g‡‡h.Éõ’—D1kH¯N¶ú¬|¸o‚n¿À-#1¨ﬂ–.ï∆–2Úç(6î‰Úè&&xr©ÌôùüM+ö`QìQÔÅh«q‚K$ÎÆ—ñÎw_@l>IƒVI…æÆÒ≤g>™¥{D∞
’¯hÚë›lf˘‰	Z§Ã≠C°Ω¿{Aéb8˙àqıyìW†'s∫ÍbæÏÓ˙t‚àm'øë◊&ë!ÌB-ëßéB3J∫¸úá#µ„'Ì'0‹Æ9$s9.ûÛÚcX≈ÿ0—9~_mHØ0Uí>…&b=ä~a“\RRÆ@¶i?Ïﬂˆ¯˛1G¡˛ßÏ!©`Z≈˝	V8Q'∫›˜H	∏e<˝yS‰`U±ïèÖÒL‰ﬂu≥îAπ|{ûÙÙøKº2î˙¢„3;·j)ˇ‰ãÌ„˝˛6;f€ù≥ƒ~êuô%¨í7ÂpÉT9hkzÆ^9Tim∏’ÄY˘{+·}ë>H5øíÿDíPdŸcÏ¶{a’R¿çî,æ3≥S†ãFÍ	,i&gÍ@Ê—VæÙ4¬≠—ãi>ôÀ›`˜	\é¨ù"®p§ês^^óU¶0˙ÎÕ#∑TéËé¶›ÙM·DÜˆâEñgöS∞˚N©≈ª9s32’Œ\¢–á£(¶c„◊”æô{≥Pˆ∆Tr„¡·]V®Äê©¬T-õñh
ÖG§€Ù}1àŒ≠πª£yW¢«ÛÂh†ﬂt+aq”>t¨˚≈pZA∞Ÿ∫Œ≈°∆·¸ò\6w^µ(E>¨ÍSÔH8∞®§YfÅ6˘° Èy˝≤bÑÈê—ÙÂ‹‚jR˝I·ÔÌa¨0[']Æ‰®KÎ sÜ∞»>∆∫?∫OW)$ƒ45,6N;œ~#†:°ı*»ñtÙ 9ÜôdÈ¨PißÉvö/`Ö±€ã≠"9·.˚˛ŸÓ≥õ´ú“ø∆º¶ {R§ï¥X’ÂK=eCøô®è9ñ÷uœD—â€9ë%∫”¨µƒvë*“ èÍï¬0?¯üØwç5¬Ê6:Òﬁ9ß≥äÆZŒÿ≥Ω/ŒÕI≤|Ñ€GJ-V,·)Ëø3cÊc±ÚŒî‚Çoî„WmìhkR=Ã§wlËë3ßî(0‚^Ô:¯i•v~[‰$%8t«xa≠bT€ë{÷Yz¡øoVV6ºˇéÈod)‘ç;l´2ÅõY„^êÁÑêËg*:&‹Ã}“ ﬂ^ê©7«ú…≈Bƒíé>+ˆ	%« ∑!H-—k}c?èØ÷Ô“Ø´˙ﬂËÉû¥ïÆ,ˇ˘^≈KˆlŒ—M<ài•\An"`¯Ú§ÙäÀÄ.¨î_%/ÑTºÀ){∆–€•‰cÌª“M‚ˇ’Ï#O/¸pgo*∞1ÿ∞ﬂ¯øLˇ∞!ÍÊ¬pjIBÔ¶	cƒ·_ŸI;ëS˚ò8óå≥9ó j;[¿^ÿo‡„åê8}ÁGî¸∏îôY—)èg—4¯~≥Âù—X G.I~Xiø6∞/}?ÈãÕ‡–sú@g∑ÅGç‹Ï÷ìKÚŒOÌxÛ∑CﬂÆ+x0ﬁ.óaFºø®+wı}B∆$’ßîÏY¶ÓUscM—âxòÁ¿’†∏≠“ë*·Ùûtgm•pmuF(NªmonÁ‘ı»à≈Öñ˚À°flã≥M5‘å4_%Q'r Jˆ£xŒö˝t•#˜Ë√è‘<^^¬ m’¯a5’∆í˙?ãbÒ¬ûi∞—"¸*◊º!ªêEã öp0ΩÍf<Q±Ö—Ã‹g◊˝-ú÷√@±
°T!ïÒ	ìéÉÇã§ÈºÃ«±ıÃ∂KsvÙ¨¸Õ u?®TÂ∑|ô 9
éM7oª` ∑pÀ!”€.˚X~Ò†´f:ÛI|ü∞ï¥{˜ÉÇv|¯1‰^)ËCL…ëWPïÇé|'Õ3qÄÂ¡iôÊ”r˝Cx‘L˚£Qm¢óÊ‚'wzµÙFöèR¨?´g∏¬¿ºÅE€Ú+eBr Ô.ì`Aeßù5Õ™∫úKú]¢:áJ–…¯A∞éà'k~ô-√éK›#e°E3E¢í~;ªJ˝@ÜÃŒB≥ù Å4kòü Ì¬Y»ì¬Ã≠;Á]æ'Jê√¸sdx∞u=Uì6J+…( eo’ß+Û˛]l√"øêa*·`s“ONsD¬lÎÃÉ·#Ïµ:+Ê–@®ﬁñ^Âı'%Åƒ“?∞√e]w]BÅ/Ä±Ω≥õ^ÇÅ5C„ö«µ˛]·8Aêø€∏ˇtd≥c>ñÊU÷ˆÂ˘/§	4uRÎ˙ËËÍ Ws1étóeeE@F3∞4GùHHJ÷œ}†'∞sK≈£ó∞¨’◊8ú¢W~BÙ;+ß¸≈ƒÄ0Àô–*	ªû †¶¶®A∆	˛˚ °r]∫Ã5ª^≠‚»óˇΩ’_åÓ‰u∫}À!≥¥°u˚˚À∑,˜ˇº¨SGòâvª<;√ﬁv¥I!”,$Ó]nT-z“S∑Èå~Óö≤≤.M %[J˚uû˙·A◊Ìj•fÌ˙Nªãf^«Â\[M ‹:J[≈k˚mê=ˆ±/ﬂœæﬂx·…€MÏâasmπneñ%_Ï5å^ÚÌÚ‡cÍ“‰ËIZa∫^=—oÂâ[8t0·ÓCZÜF7‹YÀK	º'|ôûüÿ~-ÿ*Ï#Çê`œ´3ÇêﬂÎ%&à≥ L–iJZ„Úh‡˜6ïw9’ı≥%&∫EU˙õ«l‰ŸÏZ™|s€ÉQë+{È@Ö¬0ML°≥WÕﬁı ·]ıY`äJ¬∞c(Ï	øAXv òVn∏aW*/L⁄ÓgÕ+§Ze¸àhØâÒ1 2Ì&/L≈Œl™lˇƒØÌˇƒíÇJæ‡˝¡â} SÂ˜∂ƒøó@∞F∑gf¨âá1Â”Pà
 ˆ˙ç¨›ú¿]
=çá◊œûIMEœ(≈áü≤<lVqmW'Ôƒj°¬?‹‡ì>	 ûŸYø[b ãêö≠€)ŒÃ±§#0OjYì1·å»I;{‚g:G¢j£ë‹†j˚1Üª“UC¬¡≈Ã_'YÿÇ¢*î0êfzKY◊iÏ∂&ÊÚ´¶BäDÈ©‹m{/d?˜»ÿöQ&±ø◊Ù Y-£â,A&~•¸ÜáΩ÷õòíäÆi∫∂ï—lUÉ≈Ò–éHì≤&°ßÚ"dπè$u}≠ﬂÖ‚›Ã√VÇ,r˘ÖhlÎ$Ç? ¬Ä˚Å+ZµEgƒÍnB•µÄÑú1ç™¯ﬁîÄ&¯LØ`[∑µûÏ†ó…b9ä’G±/  û?x†7ºÖ-öÕJ3;iè[≤ˆ›¶nﬁeHÈd‚-(lEÃâëﬁéß›∑uJ‚ı„	ü÷¸ﬁéì/^Ü:”]ÉÊ©Ñp√í ˛Ë;µ¯◊ÔWÆM=ﬂ˜ôÌâò“ÑÎˆöH‡‰NSädß’}h†´∆ˆ)F{oNg≤Á…+°ò}˜Èéõwg	‚ﬁ…™·a¡åﬁ%"˚ñDÅ7”…b∞Ê‘∞æﬂWıL·{ò´v&ëå¬ﬂpø†EâÚƒ™˜g–çÙ,¨l’≥J§ﬂá€ï«àÜΩßfd˘g{k
ÙΩ^ ºÌ{pjÕ∫7O›P∞Uô';7Ø£éıÌq:ÿ´Çú£‰ò>(õhG≠∂1WÆpïRne‹B˙nßï!K-´X∞g⁄ZöMtJx)ä‡-Ïá®‘◊DŸﬂ´É)àcˇw˝y4`î∑€Ù	:L•ç)ú/»çÀ‹ıŸ∞±0Ä‹˝∑öAä)ì±÷S[vCav'úÕyÒ–œ˜ÆÓé_ €!k	€A/ò∑ˆR
RKd€£(4Ñâã>÷kﬁÏ"Û0ÙS -¥224,*,w*-Î&√‰·∞;¯Ó}0ôıh˙a¨ÈùwôQ¯C¸€[ﬁ˚‚˜©†‚Æ9‹LÃ!ˇúN¢ïNfÚHºzÜI3=´wT2çÅuV‡CŸH"uî‰æé˙3˝Ü˝≈u&¬ÇÍì¶ÛsDmÊ"‹Täc~}fñ.GeÌKNÌF5ó√⁄e∏"fﬂŸ	º"∂˛°3â≥Ö≠9§NU~£mj*ãÅTrü˛
~ÃïÌì
ªÖ4_TrƒÂ≥IEóïWîPñ≠OùQ¥ê¡≤ﬁÒ˝VTvÕ2m b⁄vıI˛ãºÀÓÚ}YÿtÑàèfÁW∞í*j˛Í%ÜwÔvj%ÛÍN-"V9}Ak:¶I`°∆°K7‚,3'Å∑°k[@a«Ïı°IçäÌˆ^â
%R<˚¡mOˆ◊ZßsÊÑ‹jüM‡«Gçœ¯ãPsÒ√»∆ı’@©´ÔSh¬âœLﬂZÄ>3¥Âmˆk≥£Î∫q2LS{”Qq¯Ü[‹Õxﬁçw˛˜— õ ]éû©;üﬁ;◊È¬†RÖ©:{kxß.ó‰[Û®éñDÅGËÇ†⁄œÏ2—xb1Ì∏á©ì“‘{=ﬂ-T•ıE$uπ∏Æ]I*9∂zò.˛¬8ÑnÉg¬ÄjÇÁXkz∏¸VhØé|z;w»$adêæΩ †zÖÂFéÅ˙Bè]3√?OÒñ∑Ì`‹©,{v;Z\•ˇ2˛fZ8∏–∂Eœõƒ¢#ôË®≥6N--ô√£µlŸ†ÚåZv)%Ñdœs:7åßŒå‡H8¥™ó0ˆ÷–í“d ?Xyœ∏M w‹x∏r∏y2Y˝∑ÛwdÊCÚˆÒ‡ ﬂô•l%Î‹…™1åb&¿3onaÈEÌÀ|:HóX¶õ!6‘ vd\˘–#Ö÷TäíB≤Qf-`ì¬i~aq¯9∫ô®˝d3‹b¶ü:Õ…€"5´a
æ |˙Xzˆ˝ºÕìAQ±çtßäáÿÙÄàÑ{“°¡Å#õπ+æ„#∂]¸È¸üJ<åÕ∫‡◊WØ=àtoï˜D¬’ébâZ[ûùŒÜŸ¬ê1ÙËi¥Ls˙÷E'†¶œ’ü‰ê¿n‚;&/íA–V»"HR@ò°@'£áxX«7ññ¢≠H?ÁV-@jbZ>S f4ëì *»Z%Ÿ)∆å≤NƒÁ˜ÆíI~ŸŸàÄ í%Úæπ{Ol`ù• Õ_µ!≤í‘˝hÃ™ÀK-‰e∑öÍ¸"«I…ªÊïr“‰ˇ*ÌªìêWØnK'¢O–%R@öó*3õÌ
vÛá–Ã[%µ¿"ﬁÖ∞ì´‹ñÌ∂J≈@÷ˆÂGC{¬ßoœa‹”!öÖRCO#m‰µ'téèD_ËC~5.?_ÖR8πÅâú£{†ä‡ÿàäNÎ˚—!ÂDœ rC ío„r=£—	"™‡t·7w√LW”í6è,˚s^:uuÌGNßv¨©∫Ñ∫»˙çÔB»7öƒ`îJ¨Òöa®£wÍH√π’<[≠ıcﬂ≤=‰œCUÂ®Ë◊` v≈™I:€cp¿ÉvëVÕó˝ø©≈(h0‡≤i:hRé˚…ˆY>õìŒæg!gQ®Îu˜ı˜∑ùPCz&íuDªép.∑´ÅV7±.$˘	3‹(g™DOcI†¯MË§˜©Ó√´≈”ùrÀ.–ßíã(”»”ÚIŒ sÎPŒπ[‹”˘$8©Ävq≥p∞◊fN)pCôÉî$Ÿã±ﬁÂQˇŒ®†£å…†ïÛÛo1DXπÔ9q
`$à¥‘anp1°ÖÉJZ˘å6˝‚S7H6Ja4eâP8"õ[»l©‘äz+g/öÍhï8 ¨Ã?í¡iˆ∆ù@™<ùây2;´ÏÑµÉ,"ç=Àü!≠3|LÉqü|î…‰o±ä–≈S-Âñ6g	éFüy.õ—lÜÜ©6fÜMM2¢tC	l9Q5Ó'ÂãÆyU†Ü)bÀBOŸÊg∂‡Së)]i¡q⁄ioá!|l‡í®ˇ ÂU3∫aiç÷åy/9Ç0÷El)èhH˝≤õÆ˘¥˛T«¸^ O⁄èOê^˝IΩ„˛S=∑˛3.∞ˇ‡?—Qa£…*)ïÌP$0¶∆ØB(Ú‘L’CC£bÆC.√îV~È∆P$M¢7¯‹{úÙäƒ˝∏√‘˘Y≥ÀÚìÙS◊∆´ú∫ÆÖΩ¡ãj’ñ…«u˛Ò6%Á∞ü”ﬂÁÏ6∫Y.‹hú-hnùiV?•)o9@Ò:õ»#ü&7óvCJÎ˛Djã¿PÑ!◊¢ª0?ñ)ZΩæJ›.$>∫]VL•“¬∫Ü¢ÑÅ,MáDi,HÄ46ıTT-R≠±öÒåaEl£ É‡¶Iã_≈@GBóôr¯nùë¶)gÂcTA_˜2çêf!ü'ICÚF¢(Ú#°6âaffŒÇ"sk©tü‚x™∂ñˇäÛÀÀ(ëDA¢BÄ,ñäÓ`°Ω+Ω˘ n∑=^lÜΩµ~IE00*Ü†N£í¿L\úz◊∞ñx‹Xá‡Ñ_2»ü<2èHç¥ü’¸wê"*{3FYe·⁄≈÷-díÙ€/Gíw•‘Y
∞D±sÏ#∂.HriX^„†ƒÑ"˛q`¿⁄!„A•aLphÅY!°.BØÓ/Ñ4˙©9Ö∫–õ¿¶]:Tùó––˚í»^—◊w7c*◊í˜[∏ú&˝>+‘C êÏ2U<—(,sÆ)'…UûàÉÈò“X\dÉë·ëSB¶;<o\%R}”lÏ—ã‹lËmπâó“å≠Ç‡ÁA•p∞5¥-•‚Xî¬∏‹ÉSåÛh1®*Á≥≈kÖ»ß˘∫ñ6ÑP.¢`)õÃD∞“»5#ƒ≤K=≥=qÀ]˚~# U°0¶\ƒ™7ùÖ˚")¡Ï,•&'}∞ã„î7¢ ≤Ω—´¡dxÚBRgCòG!Å
ËÆ!π≠¿„n@Ú<j^ÔiJJ>eDô√dπ≈»uK¥|
±ÇIïr\òF»òj˚„ˇ˘|¥ÏµŒö!.áÑﬂ.≈l¶Â@‹`ﬁëó…§È≈)ÇıÙ1∑®¯–Èâ◊Wd¬òg%°öòò£O‰?6]¿tà≥©ø,‘ïH\àCôyi\xI‚wÿ˚)<T}CÆÚ‚F1≠éÊ∂ÖSP+u+0Öb˚çÉ,±`√ΩÊ=Fbky‹J”5«ƒ@!˝ìBÁâ®ï·VÒ?ã_≥[Y	·ç¿B8ÛQ^ΩÃ†ª&‚t‚u}`∑˛4´~=(ÔzÆÏaj‚N¿™¬	Ïò>T‘ŒW8:˛L©?aÈªP∞ñ L–“¬—&ãÕª∞8Ä√¯:ÁçÆMF∂|Ç3¨Ç25à?9^õ›ï/4[4‘YÃZ¶Ä‰193Å“r∆LiÍ–≤Ùa~Ä1ßºû∞_>±Ï≠¿Uäñ˜·5Õ: –ÿ{V!¸ì™{ª´ôx;î∏µwÛq√( ˆBÑ*¯Ú¥’~3ËwVNH™ìôÈ=rAÚ=Y„qU—êô©k3Ç∂±˜ÿîApã+ ~67/z'ˆÂ1œŸ	í±¡Ÿˆﬁî(ù<¶å_»Aü‹≤˚ÃÈúIâ"ˇH<–‰C22kñv£¸ÄñìzK⁄ÚËÕ∂ÀiµÙŸ!üY‡œgèo[∆ã‰Q◊}yXCJPÍzoµ{’xø÷z[Hb¬ñ`‡m∫È<¡ª÷Ê=éùxyˆFq"ÎA…]Úı»√K
Y—óA¯Q+6ﬁó‹¥eXÂ8",°ØŸƒ◊‘üs@íÿéÚ’!áƒu›GÑ∂~ìê}À
Øœ˜úÆ.Vsµcç∆qŸh≥‰"<~Ÿ|°z’vh9˘K∆öôv@¡b')Øz8U¶áu6‚|9©v)®°jŸË¶∏ó:Œp®]Ó2òÅ?Q[ÉJ>ô
€[d…„∫n≈›d€v43éæP‹Fúõ|~-Ü˝z<öÒ]‰ﬁÑ˛1}EU™”<duÕÏzY˘~Ø‰ÚÀ®¢∏H&0HS-X‘_üÌet®VQF. §≤	5Ëè=9 ≥ŒìÇtH> }Rÿãxª‘¸`fü⁄EqﬁÓ&ÆØäp.xå|Ê±í(óπfV\:ßéqà¶rÚ%Çì$"Ghü›=±ÈﬁÕ¶‹b¸côÏ˘ÚéO0 Ÿ˚+»3√„SQˇˆÓåŸ+Së”ç®ÖKU*à-ıƒ ]åú≤¬~$O`nf”i°®∏±∞≠®ßÖSJJÜ€Lõ\jÓ÷-Ã@ø ‘kjIúùf»*Hºˆ\qè¢î éπÄ«‹»€pãΩ˛7©’n8rËÂÒ2‚ŒzÉÓ∫ˆŸ˜
e ˇæ©∏É-Zxy-⁄zæÄ∂,FÅ(x@
kd6	√}˛ﬁTuãÇ)û]7√ÉÄy,∞#‰P.`&ÅÉ¡ÀŒ[äìGâ§ã¡úº„$º∏9Ç†sÜx¢°™ÁŸèVói∏TŸ˘Ô£€GíO_-µÚØçÔ&„9™..ö·´]Ïπ¡6ˆx#ÖÄßπƒÂEryN%Ô;ÀXAª¸rÌ]k£cÎewN„Ô∂ùöM|r>iL––ƒµóLÿ/kd‰)0X3_±ÍöÁ8-∂«e$Z„^hJsPÏµ ⁄Åb“ìÚ/Ÿ”n∞YB™J’!ô\‰u«{ò„ππÿiwÎ7z˛hQ1àçòCDO Œ1•ﬂ±J&H∆‚π…u%ıH°c¬ÚÔπ9-Ω´äπ<}∞k©‚ë€Ee¸€4xŒâ„”ôG≥  ±öXèºõ[8§‡ùcπ”VP[óÎãR ´∆ØÒ0î9_T&ìŒÈüßhém¢ïÌ≤ô’Ú O…lŸr-Ö≈K-¿£Ë“–’ÿ§ê®Éb0!ãΩ/„®"c¥z†EH≠ˆÑ%Âû¬≥ïñ™ b+: ú˘ãqN{õÉÉÿ`XÀfE(…¢ê∂∏ñrw©oBº¥g∂+i∏P PÖ¢Ùö£Ba?F¬•f∂e»uœ<@Ç£9Vﬁ®Ç¥ﬂõÇÄ¨DøZÏ,Ü§6›ãÇ†Ì√ø(≤€Éfb‰æR+a|+˘è0/èÃ!Â$ë˚O‘·ªÿ$) n’&Y–ç‚l}äâ˙éãwjŒEJÛf˚4G ªÿ.yà5sÔò]ÑT√hìÈÒW.Æ?ÇÈXÛÌãØëı¸“bŒ„”ÆáTK+ùNPOÀR6)Eµ~÷{»€û@1˘ŒYTIYŸxBä˛u7‘¨¶`ÿkÉ(˙¥ÚJ:Ö3ÎÂq!l‚xàvNhP)zﬁ\µaéÂR›ßC$çÿ$·»*Ù¡öŒzß‹‘ã1£Ÿ9O5®~π≈êÿH÷ÃﬁPÎ:´6±ÃKú
6ÁK(Ÿç®∂ä(ú…·∏á≥“!≠áBºÇÑÃ∂jÚ5◊*ÊÉ'∏À‘1ÇCi¢ÿTπépàÂ˙S˚Õ8Ω‚™fÛÀúÈ6ªÍ«È.êπ≤\ù:ÿz*Ú´C®T£ˇ¨0pÍY ˇ;˝Û•@A˙mwêÈ÷8C8œ¬Fî£“Hõ?•ı<”πm' K:ñ†… >îêØ›(≈Q)#à!(I‰–øU≈“h∆¶·t)N˙°∆‚:D9ÕZpå!‚N≈‰ü2  °ÇﬁPiÈ ãc˘ É◊W\‡t£W©‰ÑGJHËÒK!∏Øzâ;yó∑ááxDıöÉbû>W$ °TÀ<Z!iu•ÿ„@≥N˚ü £z∞\·N^Ç¶”÷? a&ˇ∫C6¯Ü ZPÁ±0,Å&ãPiÎ„w|÷∑\€—Aﬂ3‘\hÂrÍ1-±UFÎ¢òò“K„‘“<ÿ¶;ˇÌ™1°≈z{≈3fÔqËWK`Mc~n«Õ€ÄºWΩÚ˘/⁄”YNπÉ˛•[WGg6f,º\∆7ÑdBõ|0∑ııCå|ﬂF¿{ªlı∑ÙÅu˝¸ÑÇ⁄Çí≥€D\R‹ﬁ2⁄G©L∆ù∑…
ﬂ∑HıÆ`Ê~3Ëæù‰ﬁR+O$∑?∂¶àåËb‰[5˘©F∑åú[˜ñ\Ã‹O}H ÷ §Í”F5‰ráÔ
˙Õ–"'xÍ*~H;â¸¨Œ¯;˚@≤wa ¡º¥˘¡ˆTëx	·≠r‘êdtårp.ÀÀ≤¯*õ©Qf8&kª8ê@Lﬁ‹tÓﬂC¸…*lﬁh3*Mnâ*R5∏±œ‚=RoÛ6 8<›r˝}˝v7È_Ñk_ÜüNŒ’1œ¯€––7ÕiÂÒı√wƒEËπ≥wÛ„/“oÒ1ı˚ô‹y⁄/Ùñı&y‰„áöÍûùèÇÀpWLVWÛËï+Çﬁg…ﬁAΩså®·”Uæ&ú‚¸Ãtõ÷ÉKı©
9w≈ﬁÃı≠CB≥Ù»äY˜ÉíqÃ∏E·iµIÙè|Äõ˙ÛÜ%√€êúl{x,°*o¬Õ3yfÅæÑÿaâ∞nX˚=ˇˇLSêÛ÷?˛üÃ$Á£à˜'Ç1åˇﬂÜ∫∆_˝ˆ˛(ôò	˛ﬂrgñmøj›LMMP◊Ø˚‰JA%Ñ¢1ˇ#	˚œÒ∆ø£eq/êeËˆ%‹#€GŸãpbbÂÆ⁄%e˛8ÅÃq»î®TJ¥J≥”®SÒÁü7n{÷?÷æ†Ê¢$»√èË¢Dã80#A4hÙ
Ê∂ÌCIÀ»Ó'8t·é)Ù?;,}«¢a¥‘a‹Æ√\èÆYﬁÀ Jl¬≤‹©7ı¸⁄´¿YZjziLd!Ç•2õy”îÇˇè–ﬂ[ô≠¿Sk+›ÙUπ“ﬁi2≤8b	∑å÷"w´q„md˘å ‡ÛÉÃB—jU¨Eç_”Gd$òÜˇ˚r∫*
-≈ì\c 7ì."JƒÂ√¸ß4§æn∑õúÎ±VZˇ5ŸµàÍYˆ¢€Ë°Â(Th°)4ºÜ®ˇﬁUQ∫?˘l
&3dîM≥ﬁ?{¥¯‹5ßOµn¯øh!‰˝◊‡ı1(≈∆G0±†ˇˇà±UwØ&Å7AG∂ÌHîR≤„K—€#∫ÊÊäTTSdÃˇ…ä1jıÛKí$ôÓª´Ã°ÌôñM∫ä?«ﬁ˜öõ T‚P	∫‰¯rV⁄oÍÇùø£Y°N¥ms≤¥{9¥üÊYúGØÃœ[«Ù_¸L◊f{`õÉïûØ·wÒ:2gKBÁ,R¢kbæ;√©{áÏ∑ à‚~±AÈ~d–ü¢wmùåíx≥Ô9ˇiU#wg’˘/ÂPSb|7On±Ézà=7GÚ∑æn~Ú˝∫ırÇXW⁄ŸºnjzÔŒm∞‚üÃI®.5wÓŒ09ﬁ ˆ`7◊m∑x⁄∂òænáÔ∫U√p^«`æ{ $œ∑	9©ému†€∑äï“À‘QËíV+Ùà'“L«‘7ãÔ¡cåH<x$"Z¥
J\'.æø,·•√2b5µègÏ„yókıéHûSú¯±QàÅKC¸(FÉóÕQ≠CMÇ\$7ÿT8äeèÇ&‘(Ú¸¯*zÊÖÛ·”ÙÏË/*Úz5ëÃVq“=ÎCâ&á\¢èheÜ¶ô“f≠Ÿz¡öÇí∑]*‚KpYE»˚¶Ô≤&–Y¥·ìg·ﬁØDß∆Ö•W˛Õ÷˝7[Ø@j‹¡Wªé¬)hÃq¨"¿•&á∑UßeÑˇ0üÿXù“,å.¬3))	5-≠§§õÉÁs˜ü’õ‚ƒ•µ1nÂ¥[d<dùÛên¨ØnπÜéY òÕ≈œüöÀ¶LÎbÇäëehh`ÕËì›dGô‰éÚõ:•ºWÀ Ω° qaΩ0;≠su#!üO“⁄FÆ]ôQrè”6‹8hΩ)*îÃJŒ˙«≠:ny u(± √Fwñﬁ¯V–=g⁄uböòwN
y∆E⁄q"∂'XuŒ¥†Mq∑ÿg2Ddgp£·,eF.¥%%G¬¡ØéØ◊ss∂œUístp.ÕŸ¡bÂw6Õ!8¨iÇŒ¢Ètgy%¡Tø]ø"†[àZ?VeLÍ&≤—ï*º’W»ıB§]—÷∑ªêæFˇâÍA Mäùœ—MS_<<’€:c7√›[h´°˜oπûÆeœb7§Fπ˝CR°›Ï√—sÚaqÍŸ[q
•Ô¯ÖRŒ,d¡bÎç`‹Ê¯ÛÉPZ6\æ´Ö%∏ÅªwÛó∫¿ã⁄µp<˘ÍRNd_˜≥:9ﬁÙ_üYÅ`ú’Q`C$7∑`(`@‹“ÌH3B-ûYÜjNf±ÍpÇ©ÍŸÇÈ´ÿ◊&Ç;E/
Ú'1πyòººOHãæäÑúÃ	&°îS›Û™ëâö≠™^L‚†ºnüi®€÷ü⁄é±úêú_My6[NY´~Éÿπá®8⁄XÖ¥¯ ÔùÁ≤£.Õ›…∑]√§7¸|d˙¢·È?ê[•Û§’Ÿ⁄„Ëí•g…Óﬁ∞÷Œ∑9⁄á»öŒ^0Ò5âNÊ,	Ìíèï:°L3Ù‡ë–Êv¯k:h´ ∂$_@m€˛3Œ•Fìyj;Û15_∑Ã∂úi%XITcîÃºÀ§`Ã{;3»)6:læQîÃöÿPb_úœîònïJu˛~’Z@W†SDø‚¥6•$[f¯)±l-ËcÜN$X‰À≠¥EûªRX*Èj•–…dW-åüY–±W3Y’¶7l”≈ﬁu4+‘b3Ê^Ü#P«Ä–2Ê=^?…ìˇ÷ºç2tFﬁœfëÑ£´Î˜§¸ë»ﬂ›¿£\±¿„{IGsctÖ¬%ÈÒ‹d§Ë¡Ï*#©Jº±≥=»´&¶i+G≠⁄J√ë£•‰x}ne”ˇY™“^—hE›+kº≠NΩá QΩ’ú@ œì&KÄCpêÎ= ^yj´çÜVªßzÍ= ÿ√ﬂùnâÊô÷ò3∑á!aÔŸ©aÁ¨‡«Üàı⁄2X‡‘~kn¥Œπê˙≠›¯Î<ô#–F"oî±Eë£ËsΩıÔ…ßAÇ°ô≈^)Î∞Ÿ¢útﬁ∫h?a|˘" áwÖ5‰÷Tcg˘SÉE∂,¶Ò=≈sÖ†i·41rú™Ìf2ÿJ”è(√é¸ÕN&M'5`jÀV±‰2j9œƒƒ†ì6[ƒ‚Ü(Ë±≤·ÒÑ‚4 úàÍ,<8 }d∏“l	|m˚µ¶<'ë[hﬁ¯X]&öy„,3äC‰vÆîø5≠«¢"ªªô7÷∑de]éÕ~7lîg*Û∏†T©ë@ô<¸‚,bî¡Òbıï:7∑é˚Ç´F\<≠Clû•É˚QW4=Ïä˚&»ﬂπÇúrÛá;€˜}©ùB7—0π6˜Ïºˇ)¨Ÿ}eQÍË˜Ú-?∆èvÎüÏ>o”E≈Ê÷J¯òõó= ®¸
~I.ãqCˆ8@U´‹:R!>7:Ö«#z÷#ÌNáïÔp£¿›„.àO?á´˙÷-≤è@ˇ3†˛Û¢Ôí∆‚†¡í¸ﬁùò¯-⁄Úê¿6TÙ√%7ƒ!§R*ø@ 3Ÿ8V‹ë¸˙µúÑøm®ù>÷+…h3èéY«lªÁZÿ|∂éÛ)±	AF¡ñÉZù(mGK=€¨søÜŒY>±€>®Ù0'˛ß5=–ùpÈD»≠π⁄ôs—LqaÌùC≤KÄ;¬≥%”÷,Jõã=˚ÿ’Áu§Aè_◊ø°ŸW¬©«π©çÈ§|knÕïq˚æ≠:j(KÙK–Uüol≥/!◊Ô™@UËﬂ∞¥úˆD4“=OË≠Á’ñv8#π•d°èØ5Ô(L;ÏM‚Ï√ì∂2¸ﬁSï1¯≤ ‘#]‘Ô*g'„ß fIÛ<b—9mÎ,hÙM*†=/ëY7|=Ä6HL¸˛6cÿ≠"Y°ºÑ??.tœ“≈èÈ_ØÔ‹u©Çh}ˆˇ‘?X‹ˇ Gj˝ÂÜ’eˇGå ïpï,‘ú¯å`=J´2ÜÃ~8{L~KPÑÖÏ◊è√.U/˛≥G ã≤#eŒÈo∞¯Ô(°∑a%Áë4≥s—‰»Áo¯⁄ú™] Xø¿Tf˛ÎäVçlÔ—ÈﬂÛˇœ◊oã	ë›fklŸSôf[$ÈF¶ù'∏àπ·µ]°úDUçòÒN¶ΩˇﬂZ≠)§w“c≈Ä/S/¢L·Á∂€;:"tôÙ€%≥*jÛªàıudYóè_RçÀåOnéô‰ç¯Y˜¶©ÂàkaÄO[›Ñ«u*cOv Ò∆w&+1≥g•ê¬qZ¢G#Zf¥3◊®ÿg°2 ‹Ü·"KsPÆòabUeiniCF…
∫áÑîJÂ≤Zñ¥,÷Ôƒä
*ØÄ≈K¸—7,5™”AQ
Ñ[;%8+ß„;‰ﬂÆ*Õº"úÕµèTP∞;—÷ ìè5ƒI?«Ç
ëw*SDHT&ƒâ2”π_•Hí0]¥Ë¶8âŒY2ïâ·QW'Ï•ï$*Ú•‘≥cõBP2˛§Iù÷Ø—ÍÕËáÀ˜ÙVF˚9∞E∆πŒs4¯pø,Á+fø?ì…Î%§ﬂlò ¸ÆõÀ†ù¡U!yé%¥ÃKÎFT°g`ô•ñ—x4∂µÁ¶Ç¥e- <≤}MöÂƒ¢ï òCôÃ%GåÃπµjìKÇ¶.Ê®'Æqû0óìçøeTôà eªF∞w8=—Ÿr÷I∂,–:–RùX›XP&∂êHÍÚÆõ¶¶=¿®â∫H·’x
≠Qèn¥8r‹bx´D^πß>%+kßÈÙ·D˙Ç˚ìgE”˝Àµ3'x>º›Õ<n]FÅ¬N®~»Z%[è6>Æ÷Áá∑∞HëwÁÒ@ö£	∞®?”{ŸR3s—8c“¯ıìF<Nûq
IH˛◊R⁄>ƒ%kè¡F]Óœ1|
ùŸ∫ı*#ØNü˙K‡^ËçAÕ=—”![¡◊çºaU–KóÃ˜K¥ Àî√Á´öâ…˝}¯Msﬂ+AåÂMVÜKKYÛ¡¥∂˝ÅÕ”ºwÉj∫ÛsÏ˛p·ûÃ@t}c\RÉµéΩı§¨m4∂_,⁄[Îƒ#wámiÈE6ú∆Úø£qwÛ√Öü˜àÛ…JﬁkãÁ∆T~Vèxo^v≤†◊ÇßN‘A¸ú4-Ê‚rfS æíj+ªdÊ©S›&
rbg‚ÏôÕ§àâ•æ√ÄÒ©ﬁViﬂ^B.yGvC5\‹ÕÓQƒ÷P§Oìòøé$}Pıòp˝M˜sr~ô&æ?9<V"™8*ÊˆóÍ¿ò¯Z.N3tàW‚@ñ·Æﬁ zA†jÈ≤÷ÏF?oı©°„‘ü ˆ® µ∆S¶Ûù∏Ø/;˝4Ë˘¥Û~¿¿Àﬂx˛˛/ˇ√@‰^få'ï∂9ü-@ 9≤bÖ¸bè,≥(J$% ˘ËóV≤tEÆ`ÜΩ§Ü¡uuèÕu[ÇnDy¬mõ	¯π∏äú[ DMÏAó8J+8IˇèN…6Œl˛{æâ¥>/«îÆ°Âﬂ(0s¡^ kÖjÕOHäH«ÎÎŸ:Qœ*†vpÑ›+ü‘ÏÛÒI®Úïr xU˜aﬂQÓ¸^=R|–√"‰ä‹Ü`√¿N≈ã˝@À(”`’^Ép’≈©†§ùA¡N|R@“ÓF˘¸£∏G&Æ¢ô*b·ã%@‡ãh∂ÂŸÉó˝«Œî∆ ´èü±^—im4∞]‰éÇŒï±‰òyŸ‘,î’;’‰Û,2ì»ÁîR…2ô+gÁ·#nxöYNUÿêíé+˘Çd" K‘ºbL*o“Ô÷Î’çùà3Ô7eïÂíLy^íñhç›xi)SJùπlÍÜ%{”≠‡–-·b%H∏ôN®YNœÁGì¬"Ï˜I8ãﬂÊÈh
GKoP`—s©,¥çgŸxjo⁄¬À“KAÆ≠% ≥DPä”ùO6Ñ–∂©ië4$aa¬Eú∂âtôˇ°ªsåŸ˚üûø«)}X€™∑@∫û~î/rˆeïÄÄMä”sTΩ!BV'Äƒ´Új◊≈æÑRÍõ*–§ˇ7`Bm`¯≠àa„ rÅ§™Ÿª&ò4å≠[3òí<•e(3Ô=9ó´≠dh&9YryáÈ°@U•≤K˘·YSºë}Ê¥¢–n¿Á…6Èû’™À¿ç∏%⁄ﬁÌgÿ6ÈÂ~-€»y!im≤}F™®2CÔl–d¥å¥T{ÕLaYUjtrËÓ)—ãQjI! Råã”§√ß;ıë—ÊÛ‚Õv°á¬ZP"1ƒ§^›Í%«B‘F¸\i)≈òkR¨Öj;˝ë)3iw’Æ◊¡k‹ôkRûf*∆Õ'KπÄïºÍP© ˜›Öƒ3™FG®mªƒ4ﬂ≠!›{˚íﬁ"ù⁄µ{Yœº¶öv∑ÉA}€¿ÅfkıéÅxv“⁄≥Ãú∑sÛ±Uà`ßCí+#Ê> l⁄∫˚[ìßX;Hã¥¶ô÷\g„≠√ÕÓ=Ü0∆¨9sååÅË…!º¬Ím¯ÓÄÀå| ôÑÙ\œ´πà	œ#ÜB/ÉbÈ>•√ì5¬Nº|9ÁN+Up8rfæDÍÛG˜∑`˙¯¥‚Y„†Û:_$6"jwû≥‰áΩi$åé*Ö*áZã~Cè›(º¶¸Ω}H’˜ÎO÷Óœ¬–@ˇ?û	{<≤sëØsxù&ôVTëF5≈J%Ωïë\1‰‹€?⁄,a´˜*;±Ê◊r÷Ü+∏P’m¡	·ﬁÕX¶ÿπzîÏƒóÚx‰KÅë≤÷®E∞†Ü√:ê¥H∞0ãÑ<¯ Ω√˚MY“êEæwMÿA–¶1ùorÁŒ;
∆]
¨™ÏAu¢#¬xj÷ÅÉwxréòÅ«∫«éM≥Ûä{U’ö|ˆ–-Qq⁄¢G<‚ÿ!#ïh`9;Î“∆ößˆ@?0s6Öã∞•jcMm∑Zø¨DK∆¸êÌ2ÄèùT≈”œÒ<–¶ø¶^ÂC[È[ÿ•«g]a£ÆÊ–7_)Áq7i&Ëæo∫Ìm'cvéıÍ1•ï
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
